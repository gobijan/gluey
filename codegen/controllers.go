package codegen

import (
	"bytes"
	"fmt"
	"strings"

	"gluey.dev/gluey/expr"
)

// ControllersGenerator generates controller interfaces and base controller.
type ControllersGenerator struct {
	app *expr.AppExpr
}

// NewControllersGenerator creates a new controllers generator.
func NewControllersGenerator(app *expr.AppExpr) *ControllersGenerator {
	return &ControllersGenerator{app: app}
}

// GenerateBase generates the base controller.
func (g *ControllersGenerator) GenerateBase() (string, error) {
	var buf bytes.Buffer
	
	buf.WriteString(fmt.Sprintf("package controllers\n\n"))
	buf.WriteString("// Generated by Gluey - DO NOT EDIT\n\n")
	buf.WriteString("import (\n")
	buf.WriteString("\t\"gluey.dev/gluey/runtime\"\n")
	buf.WriteString(")\n\n")
	
	buf.WriteString("// BaseController provides common functionality for all controllers.\n")
	buf.WriteString("// Embed this in your controller implementations.\n")
	buf.WriteString("type BaseController struct {\n")
	buf.WriteString("\t*runtime.BaseController\n")
	buf.WriteString("}\n\n")
	
	buf.WriteString("// NewBaseController creates a new base controller.\n")
	buf.WriteString("func NewBaseController() *BaseController {\n")
	buf.WriteString("\treturn &BaseController{\n")
	buf.WriteString("\t\tBaseController: runtime.NewBaseController(\"gen/webapp/views\"),\n")
	buf.WriteString("\t}\n")
	buf.WriteString("}\n")
	
	return buf.String(), nil
}

// GenerateResource generates a controller interface for a resource.
func (g *ControllersGenerator) GenerateResource(resource *expr.ResourceExpr) (string, error) {
	var buf bytes.Buffer
	
	buf.WriteString(fmt.Sprintf("package controllers\n\n"))
	buf.WriteString("// Generated by Gluey - DO NOT EDIT\n\n")
	buf.WriteString("import (\n")
	buf.WriteString("\t\"net/http\"\n")
	buf.WriteString(")\n\n")
	
	controllerName := g.toControllerName(resource.Name)
	
	buf.WriteString(fmt.Sprintf("// %s handles requests for %s resources.\n", controllerName, resource.Name))
	buf.WriteString(fmt.Sprintf("type %s interface {\n", controllerName))
	
	// Generate method signatures for each action
	for _, action := range resource.Actions {
		methodName := g.toMethodName(action)
		signature := g.getMethodSignature(action)
		comment := g.getMethodComment(action, resource.Name)
		
		buf.WriteString(fmt.Sprintf("\t// %s\n", comment))
		buf.WriteString(fmt.Sprintf("\t%s%s\n", methodName, signature))
		
		if action != resource.Actions[len(resource.Actions)-1] {
			buf.WriteString("\n")
		}
	}
	
	buf.WriteString("}\n")
	
	return buf.String(), nil
}

// GeneratePages generates controller interface for pages.
func (g *ControllersGenerator) GeneratePages(pages []*expr.PageExpr) (string, error) {
	var buf bytes.Buffer
	
	buf.WriteString("package controllers\n\n")
	buf.WriteString("// Generated by Gluey - DO NOT EDIT\n\n")
	buf.WriteString("import (\n")
	buf.WriteString("\t\"net/http\"\n")
	buf.WriteString(")\n\n")
	
	buf.WriteString("// PagesController handles static page requests.\n")
	buf.WriteString("type PagesController interface {\n")
	
	// Generate method for each page
	for i, page := range pages {
		for _, route := range page.Routes {
			methodName := g.toPageMethodName(page.Name, route.Method)
			comment := fmt.Sprintf("%s handles %s %s", methodName, route.Method, route.Path)
			
			buf.WriteString(fmt.Sprintf("\t// %s\n", comment))
			buf.WriteString(fmt.Sprintf("\t%s(w http.ResponseWriter, r *http.Request)\n", methodName))
			
			if i < len(pages)-1 || route != page.Routes[len(page.Routes)-1] {
				buf.WriteString("\n")
			}
		}
	}
	
	buf.WriteString("}\n")
	
	return buf.String(), nil
}

// toControllerName converts a resource name to a controller name.
func (g *ControllersGenerator) toControllerName(resourceName string) string {
	// Capitalize and pluralize
	name := strings.Title(resourceName)
	if !strings.HasSuffix(name, "s") {
		name += "s"
	}
	return name + "Controller"
}

// toMethodName converts an action to a method name.
func (g *ControllersGenerator) toMethodName(action string) string {
	return strings.Title(action)
}

// toPageMethodName converts a page name and method to a method name.
func (g *ControllersGenerator) toPageMethodName(pageName, method string) string {
	name := strings.Title(pageName)
	
	// Add method suffix for non-GET methods
	if method != "GET" {
		name += strings.Title(strings.ToLower(method))
	}
	
	return name
}

// getMethodSignature returns the method signature for an action.
func (g *ControllersGenerator) getMethodSignature(action string) string {
	return "(w http.ResponseWriter, r *http.Request)"
}

// getMethodComment returns a comment for a controller method.
func (g *ControllersGenerator) getMethodComment(action, resourceName string) string {
	switch action {
	case "index":
		return fmt.Sprintf("%s displays a list of %s", strings.Title(action), resourceName)
	case "show":
		return fmt.Sprintf("%s displays a single %s", strings.Title(action), resourceName)
	case "new":
		return fmt.Sprintf("%s displays the form for creating a new %s", strings.Title(action), resourceName)
	case "create":
		return fmt.Sprintf("%s handles the creation of a new %s", strings.Title(action), resourceName)
	case "edit":
		return fmt.Sprintf("%s displays the form for editing a %s", strings.Title(action), resourceName)
	case "update":
		return fmt.Sprintf("%s handles updating a %s", strings.Title(action), resourceName)
	case "destroy":
		return fmt.Sprintf("%s handles deleting a %s", strings.Title(action), resourceName)
	default:
		return fmt.Sprintf("%s handles the %s action", strings.Title(action), action)
	}
}